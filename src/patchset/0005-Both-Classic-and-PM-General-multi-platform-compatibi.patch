From b295a59cba830c7352d3d2d4d3948962dcf62299 Mon Sep 17 00:00:00 2001
From: Paulo Meira <10246101+PMeira@users.noreply.github.com>
Date: Fri, 16 Feb 2018 16:27:02 -0200
Subject: [PATCH] (Both Classic and PM) General multi-platform compatibility:
 use PathDelim instead of '/' or '\' to simplify file paths.

---
 Parallel_Version/Source/Common/DSSGlobals.pas  |  8 +++---
 Parallel_Version/Source/Meters/EnergyMeter.pas | 40 +++++++++++++-------------
 Parallel_Version/Source/Plot/DSSPlot.pas       | 28 +++++++++---------
 Source/Common/DSSGlobals.pas                   | 31 ++++----------------
 Source/Executive/ExecHelper.pas                |  4 +--
 Source/Meters/EnergyMeter.pas                  | 40 +++++++++++++-------------
 Source/Plot/DSSPlot.pas                        | 28 +++++++++---------
 7 files changed, 79 insertions(+), 100 deletions(-)

diff --git a/Parallel_Version/Source/Common/DSSGlobals.pas b/Parallel_Version/Source/Common/DSSGlobals.pas
index 1285781..a46009a 100644
--- a/Parallel_Version/Source/Common/DSSGlobals.pas
+++ b/Parallel_Version/Source/Common/DSSGlobals.pas
@@ -666,14 +666,14 @@ BEGIN
   // Put a \ on the end if not supplied. Allow a null specification.
   If Length(DataDirectory) > 0 Then Begin
     ChDir(DataDirectory[ActiveActor]);   // Change to specified directory
-    If DataDirectory[ActiveActor][Length(DataDirectory[ActiveActor])] <> '\' Then DataDirectory[ActiveActor] := DataDirectory[ActiveActor] + '\';
+    If DataDirectory[ActiveActor][Length(DataDirectory[ActiveActor])] <> PathDelim Then DataDirectory[ActiveActor] := DataDirectory[ActiveActor] + PathDelim;
   End;
 
   // see if DataDirectory is writable. If not, set OutputDirectory to the user's appdata
   if IsDirectoryWritable(DataDirectory[ActiveActor]) then begin
     OutputDirectory[ActiveActor] := DataDirectory[ActiveActor];
   end else begin
-    ScratchPath := GetDefaultScratchDirectory + '\' + ProgramName + '\';
+    ScratchPath := GetDefaultScratchDirectory + PathDelim + ProgramName + PathDelim;
     if not DirectoryExists(ScratchPath) then CreateDir(ScratchPath);
     OutputDirectory[ActiveActor] := ScratchPath;
   end;
@@ -931,9 +931,9 @@ initialization
 {$ELSE ! CPUX86}
    VersionString    := 'Version ' + GetDSSVersion + ' (32-bit build)';
 {$ENDIF}
-   StartupDirectory := GetCurrentDir+'\';
-   SetDataPath (GetDefaultDataDirectory + '\' + ProgramName + '\');
 
+   StartupDirectory := GetCurrentDir + PathDelim;
+   SetDataPath (GetDefaultDataDirectory + PathDelim + ProgramName + PathDelim);
    DSS_Registry     := TIniRegSave.Create('\Software\' + ProgramName);
 
    AuxParser        := TParser.Create;
diff --git a/Parallel_Version/Source/Meters/EnergyMeter.pas b/Parallel_Version/Source/Meters/EnergyMeter.pas
index 7acfb7e..86ccabc 100644
--- a/Parallel_Version/Source/Meters/EnergyMeter.pas
+++ b/Parallel_Version/Source/Meters/EnergyMeter.pas
@@ -845,7 +845,7 @@ Begin
                  On E:Exception Do DoSimpleMsg('Error making  Directory: "'+CasePath+'". ' + E.Message, 522);
               End;
             End;
-            DI_Dir  := CasePath+'\DI_yr_' + Trim( IntToStr(ActiveCircuit[ActorID].Solution.Year));
+            DI_Dir  := CasePath+ PathDelim + 'DI_yr_' + Trim( IntToStr(ActiveCircuit[ActorID].Solution.Year));
             If not DirectoryExists(DI_Dir) Then Begin
               Try
                  mkDir(DI_Dir);
@@ -1164,7 +1164,7 @@ end;
 
 function TEnergyMeterObj.MakeVPhaseReportFileName(ActorID: integer): String;
 begin
-    Result := EnergyMeterClass[ActorID].DI_Dir + '\' + Name + '_PhaseVoltageReport.CSV';
+    Result := EnergyMeterClass[ActorID].DI_Dir + PathDelim + Name + '_PhaseVoltageReport.CSV';
 end;
 
 //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@@ -2786,12 +2786,12 @@ begin
      CloseFile(FCaps);
 
      {If any records were written to the file, record their relative names}
-     If NBranches>0  Then SavedFileList[ActiveActor].Add (dirname + '\Branches.dss') else DeleteFile('Branches.dss');
-     If NXfmrs>0  Then SavedFileList[ActiveActor].Add (dirname + '\Transformers.dss') else DeleteFile('Transformers.dss');
-     If NShunts>0 Then SavedFileList[ActiveActor].Add (dirname + '\Shunts.dss') else DeleteFile('Shunts.dss');
-     If NLoads>0  Then SavedFileList[ActiveActor].Add (dirname + '\Loads.dss') else DeleteFile('Loads.dss');
-     If NGens>0   Then SavedFileList[ActiveActor].Add (dirname + '\Generators.dss') else DeleteFile('Generators.dss');
-     If NCaps>0   Then SavedFileList[ActiveActor].Add (dirname + '\Capacitors.dss') else DeleteFile('Capacitors.dss');
+     If NBranches>0  Then SavedFileList[ActiveActor].Add (dirname + PathDelim + 'Branches.dss') else DeleteFile('Branches.dss');
+     If NXfmrs>0  Then SavedFileList[ActiveActor].Add (dirname + PathDelim + 'Transformers.dss') else DeleteFile('Transformers.dss');
+     If NShunts>0 Then SavedFileList[ActiveActor].Add (dirname + PathDelim + 'Shunts.dss') else DeleteFile('Shunts.dss');
+     If NLoads>0  Then SavedFileList[ActiveActor].Add (dirname + PathDelim + 'Loads.dss') else DeleteFile('Loads.dss');
+     If NGens>0   Then SavedFileList[ActiveActor].Add (dirname + PathDelim + 'Generators.dss') else DeleteFile('Generators.dss');
+     If NCaps>0   Then SavedFileList[ActiveActor].Add (dirname + PathDelim + 'Capacitors.dss') else DeleteFile('Capacitors.dss');
 
    End; {IF}
 
@@ -2929,18 +2929,18 @@ Begin
         WriteTotalsFile(ActorID);  // Sum all energymeter registers to "Totals.CSV"
         SystemMeter.CloseDemandIntervalFile(ActorID);
         SystemMeter.Save(ActorID);
-        CloseMHandler(EMT_MHandle, DI_Dir + '\EnergyMeterTotals.CSV', EMT_Append);
+        CloseMHandler(EMT_MHandle, DI_Dir + PathDelim + 'EnergyMeterTotals.CSV', EMT_Append);
         EMT_MHandle :=  nil;
-        CloseMHandler(TDI_MHandle, DI_Dir+'\DI_Totals.CSV', TDI_Append);
+        CloseMHandler(TDI_MHandle, DI_Dir+PathDelim+'DI_Totals.CSV', TDI_Append);
         TDI_MHandle :=  nil;
         DIFilesAreOpen := FALSE;
         if OverloadFileIsOpen then Begin
-            CloseMHandler(OV_MHandle,EnergyMeterClass[ActorID].DI_Dir+'\DI_Overloads.CSV', OV_Append);
+            CloseMHandler(OV_MHandle,EnergyMeterClass[ActorID].DI_Dir + PathDelim + 'DI_Overloads.CSV', OV_Append);
             OV_MHandle  :=  nil;
             OverloadFileIsOpen := FALSE;
         End;
         if VoltageFileIsOpen then Begin
-            CloseMHandler(VR_MHandle,EnergyMeterClass[ActorID].DI_Dir+'\DI_VoltExceptions.CSV', VR_Append);
+            CloseMHandler(VR_MHandle,EnergyMeterClass[ActorID].DI_Dir + PathDelim + 'DI_VoltExceptions.CSV', VR_Append);
             VR_MHandle  := nil;
             VoltageFileIsOpen := FALSE;
         End;
@@ -3024,7 +3024,7 @@ Begin
 
           {Open FDI_Totals}
           Try
-              FileNm :=  DI_Dir+'\DI_Totals.CSV';
+              FileNm :=  DI_Dir+PathDelim+'DI_Totals.CSV';
               {File Must Exist}
               If FileExists(FileNm) Then  TDI_Append := True;
               CreateFDI_Totals(ActorID);
@@ -3039,7 +3039,7 @@ end;
 
 function TEnergyMeterObj.MakeDIFileName(ActorID:integer): String;
 begin
-    Result := EnergyMeterClass[ActorID].DI_Dir + '\' + Self.Name + '.CSV';
+    Result := EnergyMeterClass[ActorID].DI_Dir + PathDelim + Self.Name + '.CSV';
 end;
 
 procedure TEnergyMeter.Set_SaveDemandInterval(ActorID: integer; const Value: Boolean);
@@ -3115,7 +3115,7 @@ begin
     end;
     WriteintoMemStr(TDI_MHandle, Char(10));
  Except
-    On E:Exception Do DoSimpleMsg('Error creating: "'+DI_Dir+'\DI_Totals.CSV": '+E.Message, 539)
+    On E:Exception Do DoSimpleMsg('Error creating: "'+DI_Dir+ PathDelim +'DI_Totals.CSV": '+E.Message, 539)
  End;
 end;
 
@@ -3131,12 +3131,12 @@ begin
   If This_Meter_DIFileIsOpen Then Exit;
 
   Try
-      FileNm := EnergyMeterClass[ActorID].Di_Dir + '\DI_SystemMeter.CSV';
+      FileNm := EnergyMeterClass[ActorID].Di_Dir + PathDelim + 'DI_SystemMeter.CSV';
       AssignFile(SystemDIFile, FileNm );
       {File Must Exist}
       If FileExists(FileNm) Then
       Begin
-//        DI_MMFView:=  MapFile2Memory(EnergyMeterClass.DI_Dir+'\DI_SystemMeter.CSV', DI_MMFHandle);
+//        DI_MMFView:=  MapFile2Memory(EnergyMeterClass.DI_Dir+ PathDelim + 'DI_SystemMeter.CSV', DI_MMFHandle);
 //        DI_Cursor :=  GetMMFCursor(DI_MMFView);
       End
       Else OpenDemandIntervalFile;
@@ -3168,7 +3168,7 @@ var
   File_Path : string;
 begin
      IF This_Meter_DIFileIsOpen Then Begin
-       File_Path  :=  EnergyMeterClass[ActorID].DI_Dir+'\DI_SystemMeter.CSV';
+       File_Path  :=  EnergyMeterClass[ActorID].DI_Dir + PathDelim + 'DI_SystemMeter.CSV';
        CloseMHandler(SDI_MHandle, File_Path, SDI_Append);
        SDI_MHandle  :=  nil;
        This_Meter_DIFileIsOpen := FALSE;
@@ -3234,7 +3234,7 @@ begin
        {If we are doing a simulation and saving interval data, create this in the
         same directory as the demand interval data}
        If  energyMeterClass[ActorID].SaveDemandInterval[ActorID] Then
-          Folder := energyMeterClass[ActorID].DI_DIR + '\'
+          Folder := energyMeterClass[ActorID].DI_DIR + PathDelim
        Else
           Folder := GetOutputDirectory;
        GlobalResult := CSVName;
@@ -3376,7 +3376,7 @@ begin
         WriteintoMemStr(FM_MHandle, inttostr(ActiveCircuit[ActorID].Solution.Year));
         For i := 1 to NumEMRegisters Do WriteintoMem(FM_MHandle,Double(RegSum[i]));
         WriteintoMemStr(FM_MHandle, Char(10));
-        CloseMHandler(FM_MHandle, DI_Dir + '\Totals.CSV', FM_Append);
+        CloseMHandler(FM_MHandle, DI_Dir + PathDelim + 'Totals.CSV', FM_Append);
         FM_MHandle  := nil;
 
   Except
diff --git a/Parallel_Version/Source/Plot/DSSPlot.pas b/Parallel_Version/Source/Plot/DSSPlot.pas
index 3e7b74c..f0dabd8 100644
--- a/Parallel_Version/Source/Plot/DSSPlot.pas
+++ b/Parallel_Version/Source/Plot/DSSPlot.pas
@@ -1522,8 +1522,8 @@ begin
    { If PeakDay=True then we only plot the peak of a 24-hr day }
    Names := TStringList.Create;
    { Open File }
-   FileName := CaseName + '\di_yr_' + Trim(IntToStr(CaseYear))
-     + '\' + MeterName + '.CSV';
+   FileName := CaseName + PathDelim + 'di_yr_' + Trim(IntToStr(CaseYear))
+     + PathDelim + MeterName + '.CSV';
    If Not FileExists(FileName) Then
    Begin
       DoSimpleMsg('File "' + FileName + '" does not exist.', 191);
@@ -1809,19 +1809,19 @@ begin
             SearchForMeterName := FALSE;
             Case iPass of
                1:
-                  FileName := CaseName + '\di_yr_' + Trim(IntToStr(CaseYear))
-                    + '\Totals.CSV';
+                  FileName := CaseName + PathDelim + 'di_yr_' + Trim(IntToStr(CaseYear))
+                    + PathDelim + 'Totals.CSV';
                2:
                   If (CompareText(WhichFile, 'Totals') = 0) OR
                     (CompareText(WhichFile, 'Systemmeter') = 0) Then
                   Begin
-                     FileName := CaseName + '\di_yr_' + Trim
-                       (IntToStr(CaseYear)) + '\' + WhichFile + '.CSV';
+                     FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                       (IntToStr(CaseYear)) + PathDelim + WhichFile + '.CSV';
                   End
                   Else
                   Begin
-                     FileName := CaseName + '\di_yr_' + Trim
-                       (IntToStr(CaseYear)) + '\' + 'EnergyMeterTotals.CSV';
+                     FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                       (IntToStr(CaseYear)) + PathDelim +'EnergyMeterTotals.CSV';
                      SearchForMeterName := TRUE;
                   End;
             End;
@@ -2152,20 +2152,20 @@ begin
                   SearchForMeterName := FALSE;
                   Case iPass of
                      1:
-                        FileName := CaseName + '\di_yr_' + Trim
-                          (IntToStr(CaseYear)) + '\Totals.CSV';
+                        FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                          (IntToStr(CaseYear)) + PathDelim + 'Totals.CSV';
                   Else
                      Begin
                         If (CompareText(WhichFile, 'Totals') = 0) OR
                           (CompareText(WhichFile, 'Systemmeter') = 0) Then
                         Begin
-                           FileName := CaseName + '\di_yr_' + Trim
-                             (IntToStr(CaseYear)) + '\' + WhichFile + '.CSV';
+                           FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                             (IntToStr(CaseYear)) + PathDelim + WhichFile + '.CSV';
                         End
                         Else
                         Begin
-                           FileName := CaseName + '\di_yr_' + Trim
-                             (IntToStr(CaseYear)) + '\' +
+                           FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                             (IntToStr(CaseYear)) + PathDelim +
                              'EnergyMeterTotals.CSV';
                            SearchForMeterName := TRUE;
                         End;
diff --git a/Source/Common/DSSGlobals.pas b/Source/Common/DSSGlobals.pas
index a58cb76..61de864 100644
--- a/Source/Common/DSSGlobals.pas
+++ b/Source/Common/DSSGlobals.pas
@@ -654,24 +654,14 @@ BEGIN
   // Put a \ on the end if not supplied. Allow a null specification.
   If Length(DataDirectory) > 0 Then Begin
     ChDir(DataDirectory);   // Change to specified directory
-    {$IF (defined(Windows) or defined(MSWindows))}
-    If DataDirectory[Length(DataDirectory)] <> '\' Then DataDirectory := DataDirectory + '\';
-    {$ENDIF}
-    {$IFDEF UNIX}
-    If DataDirectory[Length(DataDirectory)] <> '/' Then DataDirectory := DataDirectory + '/';
-    {$ENDIF}
+    If DataDirectory[Length(DataDirectory)] <> PathDelim Then DataDirectory := DataDirectory + PathDelim;
   End;
 
   // see if DataDirectory is writable. If not, set OutputDirectory to the user's appdata
   if IsDirectoryWritable(DataDirectory) then begin
     OutputDirectory := DataDirectory;
   end else begin
-    {$IF (defined(Windows) or defined(MSWindows))}
-    ScratchPath := GetDefaultScratchDirectory + '\' + ProgramName + '\';
-    {$ENDIF}
-    {$IFDEF UNIX}
-    ScratchPath := GetDefaultScratchDirectory + '/' + ProgramName + '/';
-    {$ENDIF}
+    ScratchPath := GetDefaultScratchDirectory + PathDelim + ProgramName + PathDelim;
     if not DirectoryExists(ScratchPath) then CreateDir(ScratchPath);
     OutputDirectory := ScratchPath;
   end;
@@ -865,23 +855,12 @@ initialization
    VersionString    := 'Version ' + GetDSSVersion + ' (32-bit build)';
 {$ENDIF}
 
+   StartupDirectory := GetCurrentDir + PathDelim;
+   SetDataPath (GetDefaultDataDirectory + PathDelim + ProgramName + PathDelim);
 {$IFNDEF FPC}
-   StartupDirectory := GetCurrentDir+'\';
-   SetDataPath (GetDefaultDataDirectory + '\' + ProgramName + '\');
    DSS_Registry     := TIniRegSave.Create('\Software\' + ProgramName);
-
-
 {$ELSE}
-{$IFDEF WINDOWS} // deliberately different from MSWindows (Delphi)
-        StartupDirectory := GetCurrentDir+'\';
-        SetDataPath (GetDefaultDataDirectory + '\' + ProgramName + '\');
-        DSS_Registry     := TIniRegSave.Create(DataDirectory + 'opendsscmd.ini');
-{$ENDIF}
-{$IFDEF UNIX}
-        StartupDirectory := GetCurrentDir+'/';
-        SetDataPath (GetDefaultDataDirectory + '/' + ProgramName + '/');
-        DSS_Registry     := TIniRegSave.Create(DataDirectory + 'opendsscmd.ini');
-{$ENDIF}
+   DSS_Registry     := TIniRegSave.Create(DataDirectory + 'opendsscmd.ini');
 {$ENDIF}
 
    AuxParser        := TParser.Create;
diff --git a/Source/Executive/ExecHelper.pas b/Source/Executive/ExecHelper.pas
index c2bdf6b..6901d25 100644
--- a/Source/Executive/ExecHelper.pas
+++ b/Source/Executive/ExecHelper.pas
@@ -439,7 +439,7 @@ Begin
                   END;
                End;
 
-             IF ActiveCircuit <> Nil THEN ActiveCircuit.CurrentDirectory := CurrDir +'\';
+             IF ActiveCircuit <> Nil THEN ActiveCircuit.CurrentDirectory := CurrDir + PathDelim;
 
           EXCEPT
              On E: Exception DO
@@ -624,7 +624,7 @@ Begin
           Except
              On E:Exception Do DoSimpleMsg('Error making Directory: "'+SaveDir+'". ' + E.Message, 247);
           End;
-       SaveFile := SaveDir+'\'+SaveFile;
+       SaveFile := SaveDir + PathDelim + SaveFile;
      End;
      WriteClassFile(DSSClass, SaveFile, FALSE); // just write the class with no checks
    End;
diff --git a/Source/Meters/EnergyMeter.pas b/Source/Meters/EnergyMeter.pas
index fd28c88..cb34bb5 100644
--- a/Source/Meters/EnergyMeter.pas
+++ b/Source/Meters/EnergyMeter.pas
@@ -843,7 +843,7 @@ Begin
                  On E:Exception Do DoSimpleMsg('Error making  Directory: "'+CasePath+'". ' + E.Message, 522);
               End;
             End;
-            DI_Dir  := CasePath+'\DI_yr_' + Trim( IntToStr(ActiveCircuit.Solution.Year));
+            DI_Dir  := CasePath+ PathDelim + 'DI_yr_' + Trim( IntToStr(ActiveCircuit.Solution.Year));
             If not DirectoryExists(DI_Dir) Then Begin
               Try
                  mkDir(DI_Dir);
@@ -1162,7 +1162,7 @@ end;
 
 function TEnergyMeterObj.MakeVPhaseReportFileName: String;
 begin
-    Result := EnergyMeterClass.DI_Dir + '\' + Name + '_PhaseVoltageReport.CSV';
+    Result := EnergyMeterClass.DI_Dir + PathDelim + Name + '_PhaseVoltageReport.CSV';
 end;
 
 //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@@ -2784,12 +2784,12 @@ begin
      CloseFile(FCaps);
 
      {If any records were written to the file, record their relative names}
-     If NBranches>0  Then SavedFileList.Add (dirname + '\Branches.dss') else DeleteFile('Branches.dss');
-     If NXfmrs>0  Then SavedFileList.Add (dirname + '\Transformers.dss') else DeleteFile('Transformers.dss');
-     If NShunts>0 Then SavedFileList.Add (dirname + '\Shunts.dss') else DeleteFile('Shunts.dss');
-     If NLoads>0  Then SavedFileList.Add (dirname + '\Loads.dss') else DeleteFile('Loads.dss');
-     If NGens>0   Then SavedFileList.Add (dirname + '\Generators.dss') else DeleteFile('Generators.dss');
-     If NCaps>0   Then SavedFileList.Add (dirname + '\Capacitors.dss') else DeleteFile('Capacitors.dss');
+     If NBranches>0  Then SavedFileList.Add (dirname + PathDelim + 'Branches.dss') else DeleteFile('Branches.dss');
+     If NXfmrs>0  Then SavedFileList.Add (dirname + PathDelim + 'Transformers.dss') else DeleteFile('Transformers.dss');
+     If NShunts>0 Then SavedFileList.Add (dirname + PathDelim + 'Shunts.dss') else DeleteFile('Shunts.dss');
+     If NLoads>0  Then SavedFileList.Add (dirname + PathDelim + 'Loads.dss') else DeleteFile('Loads.dss');
+     If NGens>0   Then SavedFileList.Add (dirname + PathDelim + 'Generators.dss') else DeleteFile('Generators.dss');
+     If NCaps>0   Then SavedFileList.Add (dirname + PathDelim + 'Capacitors.dss') else DeleteFile('Capacitors.dss');
 
    End; {IF}
 
@@ -2927,18 +2927,18 @@ Begin
         WriteTotalsFile;  // Sum all energymeter registers to "Totals.CSV"
         SystemMeter.CloseDemandIntervalFile;
         SystemMeter.Save;
-        CloseMHandler(EMT_MHandle, DI_Dir + '\EnergyMeterTotals.CSV', EMT_Append);
+        CloseMHandler(EMT_MHandle, DI_Dir + PathDelim + 'EnergyMeterTotals.CSV', EMT_Append);
         EMT_MHandle     := nil;
-        CloseMHandler(TDI_MHandle, DI_Dir+'\DI_Totals.CSV', TDI_Append);
+        CloseMHandler(TDI_MHandle, DI_Dir+PathDelim+'DI_Totals.CSV', TDI_Append);
         TDI_MHandle     := nil;
         DIFilesAreOpen  := FALSE;
         if OverloadFileIsOpen then Begin
-            CloseMHandler(OV_MHandle,EnergyMeterClass.DI_Dir+'\DI_Overloads.CSV', OV_Append);
+            CloseMHandler(OV_MHandle,EnergyMeterClass.DI_Dir + PathDelim + 'DI_Overloads.CSV', OV_Append);
             OV_MHandle  :=  nil;
             OverloadFileIsOpen := FALSE;
         End;
         if VoltageFileIsOpen then Begin
-            CloseMHandler(VR_MHandle,EnergyMeterClass.DI_Dir+'\DI_VoltExceptions.CSV', VR_Append);
+            CloseMHandler(VR_MHandle,EnergyMeterClass.DI_Dir + PathDelim + 'DI_VoltExceptions.CSV', VR_Append);
             VR_MHandle  :=  nil;
             VoltageFileIsOpen := FALSE;
         End;
@@ -3022,7 +3022,7 @@ Begin
 
           {Open FDI_Totals}
           Try
-              FileNm :=  DI_Dir+'\DI_Totals.CSV';
+              FileNm :=  DI_Dir+PathDelim+'DI_Totals.CSV';
               {File Must Exist}
               If FileExists(FileNm) Then  TDI_Append := True;
               CreateFDI_Totals;
@@ -3037,7 +3037,7 @@ end;
 
 function TEnergyMeterObj.MakeDIFileName: String;
 begin
-    Result := EnergyMeterClass.DI_Dir + '\' + Self.Name + '.CSV';
+    Result := EnergyMeterClass.DI_Dir + PathDelim + Self.Name + '.CSV';
 end;
 
 procedure TEnergyMeter.Set_SaveDemandInterval(const Value: Boolean);
@@ -3108,7 +3108,7 @@ begin
     end;
     WriteintoMemStr(TDI_MHandle, Char(10));
  Except
-    On E:Exception Do DoSimpleMsg('Error creating: "'+DI_Dir+'\DI_Totals.CSV": '+E.Message, 539)
+    On E:Exception Do DoSimpleMsg('Error creating: "'+DI_Dir+ PathDelim + 'DI_Totals.CSV": '+E.Message, 539)
  End;
 end;
 
@@ -3124,12 +3124,12 @@ begin
   If This_Meter_DIFileIsOpen Then Exit;
 
   Try
-      FileNm := EnergyMeterClass.Di_Dir + '\DI_SystemMeter.CSV';
+      FileNm := EnergyMeterClass.Di_Dir + PathDelim + 'DI_SystemMeter.CSV';
       AssignFile(SystemDIFile, FileNm );
       {File Must Exist}
       If FileExists(FileNm) Then
       Begin
-//        DI_MMFView:=  MapFile2Memory(EnergyMeterClass.DI_Dir+'\DI_SystemMeter.CSV', DI_MMFHandle);
+//        DI_MMFView:=  MapFile2Memory(EnergyMeterClass.DI_Dir + PathDelim + 'DI_SystemMeter.CSV', DI_MMFHandle);
 //        DI_Cursor :=  GetMMFCursor(DI_MMFView);
       End
       Else OpenDemandIntervalFile;
@@ -3161,7 +3161,7 @@ var
   File_Path : string;
 begin
      IF This_Meter_DIFileIsOpen Then Begin
-       File_Path  :=  EnergyMeterClass.DI_Dir+'\DI_SystemMeter.CSV';
+       File_Path  :=  EnergyMeterClass.DI_Dir + PathDelim + 'DI_SystemMeter.CSV';
        CloseMHandler(SDI_MHandle, File_Path, SDI_Append);
        SDI_MHandle  :=  nil;
        This_Meter_DIFileIsOpen := FALSE;
@@ -3227,7 +3227,7 @@ begin
        {If we are doing a simulation and saving interval data, create this in the
         same directory as the demand interval data}
        If  energyMeterClass.SaveDemandInterval Then
-          Folder := energyMeterClass.DI_DIR + '\'
+          Folder := energyMeterClass.DI_DIR + PathDelim
        Else
           Folder := GetOutputDirectory;
        GlobalResult := CSVName;
@@ -3364,7 +3364,7 @@ begin
         WriteintoMemStr(FM_MHandle, inttostr(ActiveCircuit.Solution.Year));
         For i := 1 to NumEMRegisters Do WriteintoMem(FM_MHandle,Double(RegSum[i]));
         WriteintoMemStr(FM_MHandle, Char(10));
-        CloseMHandler(FM_MHandle, DI_Dir + '\Totals.CSV', FM_Append);
+        CloseMHandler(FM_MHandle, DI_Dir + PathDelim + 'Totals.CSV', FM_Append);
         FM_MHandle  :=  nil;
 
   Except
diff --git a/Source/Plot/DSSPlot.pas b/Source/Plot/DSSPlot.pas
index 708013e..24e338f 100644
--- a/Source/Plot/DSSPlot.pas
+++ b/Source/Plot/DSSPlot.pas
@@ -1522,8 +1522,8 @@ begin
    { If PeakDay=True then we only plot the peak of a 24-hr day }
    Names := TStringList.Create;
    { Open File }
-   FileName := CaseName + '\di_yr_' + Trim(IntToStr(CaseYear))
-     + '\' + MeterName + '.CSV';
+   FileName := CaseName + PathDelim + 'di_yr_' + Trim(IntToStr(CaseYear))
+     + PathDelim + MeterName + '.CSV';
    If Not FileExists(FileName) Then
    Begin
       DoSimpleMsg('File "' + FileName + '" does not exist.', 191);
@@ -1809,19 +1809,19 @@ begin
             SearchForMeterName := FALSE;
             Case iPass of
                1:
-                  FileName := CaseName + '\di_yr_' + Trim(IntToStr(CaseYear))
-                    + '\Totals.CSV';
+                  FileName := CaseName + PathDelim + 'di_yr_' + Trim(IntToStr(CaseYear))
+                    + PathDelim + 'Totals.CSV';
                2:
                   If (CompareText(WhichFile, 'Totals') = 0) OR
                     (CompareText(WhichFile, 'Systemmeter') = 0) Then
                   Begin
-                     FileName := CaseName + '\di_yr_' + Trim
-                       (IntToStr(CaseYear)) + '\' + WhichFile + '.CSV';
+                     FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                       (IntToStr(CaseYear)) + PathDelim + WhichFile + '.CSV';
                   End
                   Else
                   Begin
-                     FileName := CaseName + '\di_yr_' + Trim
-                       (IntToStr(CaseYear)) + '\' + 'EnergyMeterTotals.CSV';
+                     FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                       (IntToStr(CaseYear)) + PathDelim + 'EnergyMeterTotals.CSV';
                      SearchForMeterName := TRUE;
                   End;
             End;
@@ -2152,20 +2152,20 @@ begin
                   SearchForMeterName := FALSE;
                   Case iPass of
                      1:
-                        FileName := CaseName + '\di_yr_' + Trim
-                          (IntToStr(CaseYear)) + '\Totals.CSV';
+                        FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                          (IntToStr(CaseYear)) + PathDelim + 'Totals.CSV';
                   Else
                      Begin
                         If (CompareText(WhichFile, 'Totals') = 0) OR
                           (CompareText(WhichFile, 'Systemmeter') = 0) Then
                         Begin
-                           FileName := CaseName + '\di_yr_' + Trim
-                             (IntToStr(CaseYear)) + '\' + WhichFile + '.CSV';
+                           FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                             (IntToStr(CaseYear)) + PathDelim + WhichFile + '.CSV';
                         End
                         Else
                         Begin
-                           FileName := CaseName + '\di_yr_' + Trim
-                             (IntToStr(CaseYear)) + '\' +
+                           FileName := CaseName + PathDelim + 'di_yr_' + Trim
+                             (IntToStr(CaseYear)) + PathDelim +
                              'EnergyMeterTotals.CSV';
                            SearchForMeterName := TRUE;
                         End;
-- 
2.10.0.windows.1

