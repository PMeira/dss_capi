From 72b728904c8b6916dca0f58eb9cc41e9e06b1bf7 Mon Sep 17 00:00:00 2001
From: Paulo Meira <10246101+PMeira@users.noreply.github.com>
Date: Fri, 16 Feb 2018 16:39:43 -0200
Subject: [PATCH] Classic to PM: general FreePascal/multi-platform changes --
 minor changes and a couple more PathDelim changes

---
 Parallel_Version/Source/Common/AutoAdd.pas         |   8 +-
 Parallel_Version/Source/Common/Circuit.pas         |   8 +-
 .../Source/Common/DSSCallBackRoutines.pas          |  18 ++--
 Parallel_Version/Source/Common/DSSGlobals.pas      | 114 ++++++++++++++++++---
 Parallel_Version/Source/Common/ShowResults.pas     |   4 +-
 Parallel_Version/Source/Common/SolutionAlgs.pas    |   5 +-
 Parallel_Version/Source/Common/TOPExport.pas       |  33 ++++--
 Parallel_Version/Source/Common/Utilities.pas       |  54 +++++++++-
 Parallel_Version/Source/Common/Ymatrix.pas         |   2 +-
 .../Source/Controls/CapUserControl.pas             |   2 +-
 Parallel_Version/Source/DLL/ImplGlobals.pas        |   9 +-
 Parallel_Version/Source/Executive/ExecHelper.pas   |  78 ++++++++++----
 Parallel_Version/Source/Executive/Executive.pas    |   6 +-
 Parallel_Version/Source/Executive/ShowOptions.pas  |   2 +-
 Parallel_Version/Source/Meters/EnergyMeter.pas     |   2 +-
 Parallel_Version/Source/Meters/MemoryMap_lib.pas   |  39 +++++--
 .../Source/PCElements/GenUserModel.pas             |   2 +-
 Parallel_Version/Source/PCElements/Isource.pas     |   2 +-
 .../Source/PCElements/PVSystemUserModel.pas        |   2 +-
 .../Source/PCElements/StoreUserModel.pas           |   2 +-
 Parallel_Version/Source/Parser/ParserDel.pas       |   5 +-
 Parallel_Version/Source/Shared/IniRegSave.pas      |   8 +-
 Parallel_Version/Source/Shared/mathutil.pas        |   4 +-
 23 files changed, 325 insertions(+), 84 deletions(-)

diff --git a/Parallel_Version/Source/Common/AutoAdd.pas b/Parallel_Version/Source/Common/AutoAdd.pas
index 497dfc3..8318882 100644
--- a/Parallel_Version/Source/Common/AutoAdd.pas
+++ b/Parallel_Version/Source/Common/AutoAdd.pas
@@ -87,7 +87,11 @@ Type
 implementation
 
 Uses  DSSClassDefs, DSSGlobals, PDElement, Utilities, SysUtils, Executive,
-      DSSForms,
+{$IFDEF FPC}
+        CmdForms,
+{$ELSE}
+       DSSForms,
+{$ENDIF}
       {ProgressForm, Forms,} Solution;
 
 FUNCTION SumSelectedRegisters(Mtr: TEnergyMeterObj; Regs: pIntegerArray;  count: Integer): Double;
@@ -161,7 +165,7 @@ Begin
         // No energymeters in circuit
         // Include all buses in the circuit
          BusIdxListSize :=  ActiveCircuit[ActorID].BusList.listsize;
-         BusIdxList := AllocMem(Sizeof(BusIdxList^[i])*BusIdxListSize);
+         BusIdxList := AllocMem(Sizeof(BusIdxList^[1])*BusIdxListSize);
 
          For i := 1 to BusIdxListSize Do Begin
              BusIdxList^[i] := i;
diff --git a/Parallel_Version/Source/Common/Circuit.pas b/Parallel_Version/Source/Common/Circuit.pas
index 4c48f8a..d01f410 100644
--- a/Parallel_Version/Source/Common/Circuit.pas
+++ b/Parallel_Version/Source/Common/Circuit.pas
@@ -25,7 +25,7 @@ interface
 USES
      Classes, Solution, SysUtils, ArrayDef, HashList, PointerList, CktElement,
      DSSClass, {DSSObject,} Bus, LoadShape, PriceShape, ControlQueue, uComplex,
-     AutoAdd, EnergyMeter, NamedObject, CktTree, Graphics;
+     AutoAdd, EnergyMeter, NamedObject, CktTree{$IFNDEF FPC}, Graphics{$ENDIF};
 
 
 TYPE
@@ -47,7 +47,7 @@ TYPE
 
     public
       BusName: String;
-      AddMarkerColor: Tcolor;
+      AddMarkerColor: {$IFNDEF FPC}Tcolor{$ELSE}Integer{$ENDIF};
       AddMarkerCode,
       AddMarkerSize: Integer;
 
@@ -291,7 +291,7 @@ USES
      PDElement, CktElementClass,
      ParserDel,  DSSClassDefs, DSSGlobals, Dynamics,
      Line, Transformer,  Vsource,
-     Utilities,  DSSForms, Executive;
+     Utilities, {$IFDEF FPC}CmdForms,{$ELSE}DSSForms,{$ENDIF} Executive;
 
 //----------------------------------------------------------------------------
 Constructor TDSSCircuit.Create(const aName:String);
@@ -1415,7 +1415,7 @@ constructor TBusMarker.Create;
 begin
   inherited;
   BusName := '';
-  AddMarkerColor := clBlack;
+  AddMarkerColor := {$IFDEF FPC}0{$ELSE}clBlack{$ENDIF};
   AddMarkerCode := 4;
   AddMarkerSize := 1;
 end;
diff --git a/Parallel_Version/Source/Common/DSSCallBackRoutines.pas b/Parallel_Version/Source/Common/DSSCallBackRoutines.pas
index 87a394e..49d1989 100644
--- a/Parallel_Version/Source/Common/DSSCallBackRoutines.pas
+++ b/Parallel_Version/Source/Common/DSSCallBackRoutines.pas
@@ -20,7 +20,7 @@ PROCEDURE DoSimpleMsgCallback(S:pAnsiChar; maxlen:Cardinal); StdCall; // Call ba
 
 implementation
 
-Uses  ParserDel, DSSGlobals, Executive, AnsiStrings, SysUtils, CktElement, Math, PDElement;
+Uses  ParserDel, DSSGlobals, Executive, {$IFNDEF FPC}AnsiStrings,{$ELSE}SysUtils,{$ENDIF} CktElement, Math, PDElement;
 
 Var
    CallBackParser  :TParser;
@@ -74,7 +74,7 @@ Procedure ParserStrValue(s:pAnsiChar; Maxlen:Cardinal); StdCall;
 
 Begin
     With CallBackParser Do Begin
-      SysUtils.StrlCopy(s, pAnsiChar(AnsiString(CB_Param)), Maxlen) ;
+      StrlCopy(s, pAnsiChar(AnsiString(CB_Param)), Maxlen) ;
     End;
 End;
 
@@ -87,7 +87,7 @@ Begin
         CB_ParamName  := NextParam ;
         CB_Param      := StrValue;
    End;
-   SysUtils.StrlCopy(ParamName, pAnsiChar(AnsiString(CB_ParamName)), Maxlen) ; // Copies up to Maxlen
+   StrlCopy(ParamName, pAnsiChar(AnsiString(CB_ParamName)), Maxlen) ; // Copies up to Maxlen
    Result := Length(CB_Param);
 End;
 
@@ -108,19 +108,19 @@ Var
    CktElement :TDSSCktElement;
    BusIdx     :Integer;
 Begin
-   SysUtils.StrlCopy(Name1, pAnsiChar(''), Len1) ;  // Initialize to null
-   SysUtils.StrlCopy(Name2, pAnsiChar(''), Len2) ;
+   StrlCopy(Name1, pAnsiChar(''), Len1) ;  // Initialize to null
+   StrlCopy(Name2, pAnsiChar(''), Len2) ;
    If ActiveCircuit[ActiveActor] <> Nil Then Begin
      CktElement :=  ActiveCircuit[ActiveActor].Activecktelement ;
      If CktElement <> Nil Then Begin
      {First bus}
        BusIdx := CktElement.Terminals^[1].busref;
        If BusIdx > 0 Then With  ActiveCircuit[ActiveActor].Buses^[BusIdx]  Do
-         If CoordDefined Then SysUtils.StrlCopy(Name1, pAnsiChar(AnsiString(ActiveCircuit[ActiveActor].BusList.Get(Busidx))), Len1) ;
+         If CoordDefined Then StrlCopy(Name1, pAnsiChar(AnsiString(ActiveCircuit[ActiveActor].BusList.Get(Busidx))), Len1) ;
       {Second bus}
        BusIdx := CktElement.Terminals^[2].busref;
        If BusIdx > 0 Then With  ActiveCircuit[ActiveActor].Buses^[BusIdx] do
-         If CoordDefined Then SysUtils.StrlCopy(Name2, pAnsiChar(AnsiString(ActiveCircuit[ActiveActor].BusList.Get(Busidx))), Len2) ;
+         If CoordDefined Then StrlCopy(Name2, pAnsiChar(AnsiString(ActiveCircuit[ActiveActor].BusList.Get(Busidx))), Len2) ;
       End; {If CktElement}
    End;  {If ActiveCircuit[ActiveActor]}
 End;
@@ -372,7 +372,7 @@ Begin
            With ActiveCktElement Do Begin
               S := ParentClass.Name + '.' + Name;
 
-          SysUtils.StrlCopy(FullName, pAnsiChar(AnsiString(S)), Maxlen) ;
+          StrlCopy(FullName, pAnsiChar(AnsiString(S)), Maxlen) ;
           Result := Length(FullName);
         End;
 End;
@@ -389,7 +389,7 @@ End;
 
 Procedure GetResultStrCallBack(S:pAnsiChar; Maxlen:Cardinal); StdCall;
 Begin
-     SysUtils.StrlCopy(S, pAnsiChar(AnsiString( GlobalResult )), Maxlen) ;
+     StrlCopy(S, pAnsiChar(AnsiString( GlobalResult )), Maxlen) ;
 End;
 
 {====================================================================================================================}
diff --git a/Parallel_Version/Source/Common/DSSGlobals.pas b/Parallel_Version/Source/Common/DSSGlobals.pas
index a46009a..ea5bfde 100644
--- a/Parallel_Version/Source/Common/DSSGlobals.pas
+++ b/Parallel_Version/Source/Common/DSSGlobals.pas
@@ -43,7 +43,7 @@ Uses Classes, DSSClassDefs, DSSObject, DSSClass, ParserDel, Hashlist, PointerLis
      PVSystem,
      InvControl,
      ExpControl,
-     ProgressForm,
+     {$IFNDEF FPC}ProgressForm,{$ENDIF}
      variants,
      YMatrix;
 {
@@ -196,7 +196,7 @@ VAR
    DefaultEditor    :String;     // normally, Notepad
    DefaultFontSize  :Integer;
    DefaultFontName  :String;
-   DefaultFontStyles :TFontStyles;
+{$IFNDEF FPC}DefaultFontStyles :TFontStyles;{$ENDIF}
    DSSFileName      :String;     // Name of current exe or DLL
    DSSDirectory     :String;     // where the current exe resides
    StartupDirectory :String;     // Where we started
@@ -314,10 +314,15 @@ implementation
 
 USES  {Forms,   Controls,}
      SysUtils,
-     Windows,
-     DSSForms,
+     {$IFDEF FPC}
+     resource, versiontypes, versionresource, dynlibs, CmdForms,
+       {$IFDEF Linux}
+       cpucount,
+       {$ENDIF}
+     {$ELSE}
+     Windows, DSSForms, SHFolder,
+     {$ENDIF}
      Solution,
-     SHFolder,
      Executive;
      {Intrinsic Ckt Elements}
 
@@ -332,6 +337,27 @@ VAR
    LastUserDLLHandle: THandle;
    DSSRegisterProc:TDSSRegister;   // of last library loaded
 
+{$IFDEF FPC}
+FUNCTION GetDefaultDataDirectory: String;
+Begin
+{$IFDEF UNIX}
+  Result := GetEnvironmentVariable('HOME') + PathDelim + 'Documents';
+{$ENDIF}
+{$IF (defined(Windows) or defined(MSWindows))}
+  Result := GetEnvironmentVariable('HOMEDRIVE') + GetEnvironmentVariable('HOMEPATH') + PathDelim + 'Documents';
+{$ENDIF}
+end;
+
+FUNCTION GetDefaultScratchDirectory: String;
+Begin
+  {$IFDEF UNIX}
+  Result := '/tmp';
+  {$ENDIF}
+  {$IF (defined(Windows) or defined(MSWindows))}
+  Result := GetEnvironmentVariable('LOCALAPPDATA');
+  {$ENDIF}
+End;
+{$ELSE}
 FUNCTION GetDefaultDataDirectory: String;
 Var
   ThePath:Array[0..MAX_PATH] of char;
@@ -589,6 +615,43 @@ End;
 
 
 
+{$IFDEF FPC}
+FUNCTION GetDSSVersion: String;
+(* Unlike most of AboutText (below), this takes significant activity at run-    *)
+ (* time to extract version/release/build numbers from resource information      *)
+ (* appended to the binary.                                                      *)
+
+ VAR     Stream: TResourceStream;
+         vr: TVersionResource;
+         fi: TVersionFixedInfo;
+
+ BEGIN
+   RESULT:= 'Unknown.';
+   TRY
+
+ (* This raises an exception if version info has not been incorporated into the  *)
+ (* binary (Lazarus Project -> Project Options -> Version Info -> Version        *)
+ (* numbering).                                                                  *)
+
+     Stream:= TResourceStream.CreateFromID(HINSTANCE, 1, PChar(RT_VERSION));
+     TRY
+       vr:= TVersionResource.Create;
+       TRY
+         vr.SetCustomRawDataStream(Stream);
+         fi:= vr.FixedInfo;
+         RESULT := 'Version ' + IntToStr(fi.FileVersion[0]) + '.' + IntToStr(fi.FileVersion[1]) +
+                ' release ' + IntToStr(fi.FileVersion[2]) + ' build ' + IntToStr(fi.FileVersion[3]) + LineEnding;
+         vr.SetCustomRawDataStream(nil)
+       FINALLY
+         vr.Free
+       END
+     FINALLY
+       Stream.Free
+     END
+   EXCEPT
+   END
+ End;
+{$ELSE}
 FUNCTION GetDSSVersion: String;
 var
 
@@ -643,7 +706,7 @@ var
   TempFile: array[0..MAX_PATH] of Char;
 begin
   if GetTempFileName(PChar(Dir), 'DA', 0, TempFile) <> 0 then
-    Result := Windows.DeleteFile(TempFile)
+    {$IFDEF FPC}Result := DeleteFile(TempFile){$ELSE}Result := Windows.DeleteFile(TempFile){$ENDIF}
   else
     Result := False;
 end;
@@ -686,9 +749,11 @@ Begin
   DefaultEditor    := DSS_Registry.ReadString('Editor', 'Notepad.exe' );
   DefaultFontSize  := StrToInt(DSS_Registry.ReadString('ScriptFontSize', '8' ));
   DefaultFontName  := DSS_Registry.ReadString('ScriptFontName', 'MS Sans Serif' );
+  {$IFNDEF FPC}
   DefaultFontStyles := [];
   If DSS_Registry.ReadBool('ScriptFontBold', TRUE)    Then DefaultFontStyles := DefaultFontStyles + [fsbold];
   If DSS_Registry.ReadBool('ScriptFontItalic', FALSE) Then DefaultFontStyles := DefaultFontStyles + [fsItalic];
+  {$ENDIF}
   DefaultBaseFreq  := StrToInt(DSS_Registry.ReadString('BaseFrequency', '60' ));
   LastFileCompiled := DSS_Registry.ReadString('LastFile', '' );
   TestDataDirectory :=   DSS_Registry.ReadString('DataPath', DataDirectory[ActiveActor]);
@@ -704,8 +769,8 @@ Begin
       DSS_Registry.WriteString('Editor',        DefaultEditor);
       DSS_Registry.WriteString('ScriptFontSize', Format('%d',[DefaultFontSize]));
       DSS_Registry.WriteString('ScriptFontName', Format('%s',[DefaultFontName]));
-      DSS_Registry.WriteBool('ScriptFontBold',   (fsBold in DefaultFontStyles));
-      DSS_Registry.WriteBool('ScriptFontItalic', (fsItalic in DefaultFontStyles));
+      DSS_Registry.WriteBool('ScriptFontBold', {$IFDEF FPC}False{$ELSE}(fsBold in DefaultFontStyles){$ENDIF});
+      DSS_Registry.WriteBool('ScriptFontItalic', {$IFDEF FPC}False{$ELSE}(fsItalic in DefaultFontStyles){$ENDIF});
       DSS_Registry.WriteString('BaseFrequency', Format('%d',[Round(DefaultBaseFreq)]));
       DSS_Registry.WriteString('LastFile',      LastFileCompiled);
       DSS_Registry.WriteString('DataPath', DataDirectory[ActiveActor]);
@@ -862,7 +927,11 @@ initialization
    NumOfActors            :=  1;
    ActorCPU[ActiveActor]  :=  0;
    Parser[ActiveActor]    :=  Tparser.Create;
+   {$IFDEF FPC}
+   ProgramName      := 'OpenDSSCmd';  // for now...
+   {$ELSE}
    ProgramName      := 'OpenDSS';
+   {$ENDIF}
    DSSFileName      := GetDSSExeFile;
    DSSDirectory     := ExtractFilePath(DSSFileName);
 {
@@ -934,19 +1003,40 @@ initialization
 
    StartupDirectory := GetCurrentDir + PathDelim;
    SetDataPath (GetDefaultDataDirectory + PathDelim + ProgramName + PathDelim);
+{$IFNDEF FPC}
    DSS_Registry     := TIniRegSave.Create('\Software\' + ProgramName);
+{$ELSE}
+   DSS_Registry     := TIniRegSave.Create(DataDirectory[ActiveActor] + 'opendsscmd.ini');
+{$ENDIF}
 
    AuxParser        := TParser.Create;
-   DefaultEditor    := 'NotePad';
-   DefaultFontSize  := 8;
-   DefaultFontName  := 'MS Sans Serif';
 
-   NoFormsAllowed   := FALSE;
+   {$IFDEF Darwin}
+      DefaultEditor   := 'open -t';
+      DefaultFontSize := 12;
+      DefaultFontName := 'Geneva';
+   {$ENDIF}
+   {$IFDEF Linux}
+      DefaultEditor   := 'xdg-open';
+      DefaultFontSize := 10;
+      DefaultFontName := 'Arial';
+   {$ENDIF}
+   {$IF (defined(Windows) or defined(MSWindows))}
+      DefaultEditor   := 'NotePad.exe';
+      DefaultFontSize := 8;
+      DefaultFontName := 'MS Sans Serif';
+   {$ENDIF}
+
+   {$IFNDEF FPC}NoFormsAllowed   := FALSE;{$ENDIF}
 
    LogQueries       := FALSE;
    QueryLogFileName := '';
    UpdateRegistry   := TRUE;
+   {$IFDEF FPC}
+   CPU_Freq := 1000; // until we can query it
+   {$ELSE}
    QueryPerformanceFrequency(CPU_Freq);
+   {$ENDIF}
 
 //   YBMatrix.Start_Ymatrix_Critical;   // Initializes the critical segment for the YMatrix class
 
diff --git a/Parallel_Version/Source/Common/ShowResults.pas b/Parallel_Version/Source/Common/ShowResults.pas
index 5f0edce..4e003e1 100644
--- a/Parallel_Version/Source/Common/ShowResults.pas
+++ b/Parallel_Version/Source/Common/ShowResults.pas
@@ -46,8 +46,8 @@ implementation
 Uses uComplex,  Arraydef,  sysutils, Circuit, DSSClass, DSSClassDefs, DSSGlobals,
      uCMatrix,  solution,  CktElement, Utilities, Bus, MathUtil,
      PDElement, PCElement, Generator, Transformer, EnergyMeter, Load, RegControl,
-     ParserDel, CktTree,   DSSForms, Math, Line, LineUnits, LineGeometry, YMatrix,
-     SwtControl, KLUSolve;
+     ParserDel, CktTree,   {$IFDEF FPC} CmdForms,{$ELSE} DSSForms,{$ENDIF}
+     Math, Line, LineUnits, LineGeometry, YMatrix, SwtControl, KLUSolve;
 
 VAR
    MaxBusNameLength :Integer;
diff --git a/Parallel_Version/Source/Common/SolutionAlgs.pas b/Parallel_Version/Source/Common/SolutionAlgs.pas
index 22aa8cb..09f8f77 100644
--- a/Parallel_Version/Source/Common/SolutionAlgs.pas
+++ b/Parallel_Version/Source/Common/SolutionAlgs.pas
@@ -42,8 +42,9 @@ interface
 
 implementation
 
-Uses ArrayDef, DSSGlobals, DSSForms,  Utilities, SysUtils, MathUtil, Math, Fault, uComplex, YMatrix,
-     PCElement, Spectrum, Vsource, Isource, KLUSolve, System.Classes;
+Uses ArrayDef, DSSGlobals, {$IFDEF FPC}CmdForms,{$ELSE}DSSForms, System.Classes, {$ENDIF}
+     Utilities, SysUtils, MathUtil, Math, Fault, uComplex, YMatrix,
+     PCElement, Spectrum, Vsource, Isource, KLUSolve;
 
 VAR ProgressCount:Integer;
 
diff --git a/Parallel_Version/Source/Common/TOPExport.pas b/Parallel_Version/Source/Common/TOPExport.pas
index 7a23dc0..d75fe1b 100644
--- a/Parallel_Version/Source/Common/TOPExport.pas
+++ b/Parallel_Version/Source/Common/TOPExport.pas
@@ -71,21 +71,33 @@ VAR
    TOP_Object      :Variant;  // For Top Automation
 
 implementation
-
-Uses ComObj, SysUtils, AnsiStrings, Dialogs, ActiveX, DSSGlobals;
+{$IFNDEF FPC}
+Uses ComObj, AnsiStrings, SysUtils, Dialogs, ActiveX, DSSGlobals;
+{$ELSE}
+Uses SysUtils, DSSGlobals, CmdForms, Variants;
+{$ENDIF}
 Var
   TOP_Inited:Boolean;
 
+{$IFNDEF FPC}
+function StrCopy(Dest: PAnsiChar; const Source: PAnsiChar): PAnsiChar; inline;
+begin
+  Result := System.AnsiStrings.StrCopy(Dest, Source);
+end;
+{$ENDIF}
+
 Procedure StartTop;
 
 Begin
+{$IFNDEF FPC}
   TOP_Object := CreateOleObject('TOP2000.MAIN');
   TOP_Inited := TRUE;
+{$ENDIF}
 End;
 
 Procedure TOutFile32.SendToTop;
 Begin
-
+{$IFNDEF FPC}
   TRY
      If NOT TOP_Inited Then StartTop;
 
@@ -106,11 +118,14 @@ Begin
 
         On E:Exception Do ShowMessage('Error Connecting to TOP: '+E.Message);
   End;
-
+{$ELSE}
+  DSSInfoMessageDlg ('TOP Export (COM Interface) is not supported in FPC version');
+{$ENDIF}
 End;
 
 
 
+
 Procedure TOutFile32.Open;
 BEGIN
      AssignFile(Fout,Fname);
@@ -121,7 +136,7 @@ END;
 Procedure TOutFile32.Close;
 BEGIN
 
-     System.CloseFile(Fout);  {Close the output file}
+     CloseFile(Fout);  {Close the output file}
 
 END;
 
@@ -158,7 +173,7 @@ BEGIN
          IDXData := IDXCurrentNames + NCurrents * CurrNameSize;
          IdxBaseData := 0;
 
-         sysutils.StrCopy(Title1,pAnsichar(Title));
+         StrCopy(Title1,pAnsichar(Title));
          Title2[0] := #0;
          Title3[0] := #0;
          Title4[0] := #0;
@@ -183,13 +198,13 @@ BEGIN
 
      If Header.NVoltages > 0 Then
      For i:=0 to Vnames.Count-1 Do Begin
-        Sysutils.StrCopy(Buf, pAnsichar(AnsiString(Vnames.Strings[i])));    // Assign string to a buffer
+        StrCopy(Buf, pAnsichar(AnsiString(Vnames.Strings[i])));    // Assign string to a buffer
         BlockWrite(Fout, Buf, Header.VoltNameSize, NumWrite);    // Strings is default property of TStrings
      END;
 
      If Header.NCurrents > 0 Then
      For i:=0 to Cnames.Count-1 Do Begin
-        Sysutils.StrCopy(Buf, pAnsichar(AnsiString(Cnames.Strings[i])));    // Assign string to a buffer
+        StrCopy(Buf, pAnsichar(AnsiString(Cnames.Strings[i])));    // Assign string to a buffer
         BlockWrite(Fout, Buf, Header.CurrNameSize, NumWrite);
      END;
 
@@ -258,6 +273,8 @@ Initialization
     TOPTransferFile:= TOutFile32.Create;
     TOPTransferFile.Fname := 'DSSTransfer.STO';
 
+{$IFNDEF FPC}
     CoInitialize(Nil);
+{$ENDIF}
 end.
 
diff --git a/Parallel_Version/Source/Common/Utilities.pas b/Parallel_Version/Source/Common/Utilities.pas
index 78d571e..405a2d8 100644
--- a/Parallel_Version/Source/Common/Utilities.pas
+++ b/Parallel_Version/Source/Common/Utilities.pas
@@ -154,12 +154,13 @@ Procedure BackwardSweepAllFeeders;
 
 implementation
 
-Uses Windows,    SysUtils, ShellAPI,  Dialogs,      DSSClassDefs,
+Uses {$IFDEF FPC} Process, CmdForms,{$ELSE} Windows, ShellAPI, Dialogs, Graphics, DSSForms,{$ENDIF}
+     SysUtils, DSSClassDefs, 
      DSSGlobals, Dynamics, Executive, ExecCommands, ExecOptions,
-     Solution,   DSSObject,math,      DSSForms,     ParserDel,
+     Solution,   DSSObject,math,      ParserDel,
      Capacitor,  Reactor,  Generator, Load,
      Line,       Fault,    Feeder,    HashList,
-     EnergyMeter,PCElement,ControlElem, Graphics;
+     EnergyMeter,PCElement,ControlElem;
 
 Const ZERONULL      :Integer=0;
       padString     :String='                                                  '; //50 blanks
@@ -236,6 +237,44 @@ BEGIN
     Result := Copy(S, dotpos+1, Length(S));
 End;
 
+{$IFDEF FPC}
+Procedure FireOffEditor(FileNm:String);
+Var
+   s: string;
+Begin
+  TRY
+  If FileExists(FileNm) Then
+  Begin
+{$IF (defined(Windows) or defined(MSWindows))}
+      RunCommand (DefaultEditor, [FileNm], s);
+{$ELSE}
+      RunCommand ('/bin/bash',['-c', DefaultEditor + ' ' + FileNm],s);
+{$ENDIF}
+  End;
+  EXCEPT
+      On E: Exception DO
+        DoErrorMsg('FireOffEditor.', E.Message,
+                   'Default Editor correctly specified???', 704);
+  END;
+End;
+
+Procedure DoDOSCmd(CmdString:String);
+Var //Handle:Word;
+   s: string;
+Begin
+  TRY
+{$IF (defined(Windows) or defined(MSWindows))}
+    RunCommand('cmd',['/c',CmdString],s);
+{$ELSE}
+    RunCommand('/bin/bash',['-c',CmdString],s);
+{$ENDIF}
+  EXCEPT
+      On E: Exception DO
+        DoSimpleMsg(Format('DoDOSCmd Error:%s. Error in Command "%s"',[E.Message, CmdString]), 704);
+  END;
+End;
+
+{$ELSE}       
 // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 Procedure FireOffEditor(FileNm:String);
 Var retval:Word;
@@ -276,6 +315,8 @@ Begin
   END;
 End;
 
+{$ENDIF}
+
 // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 Function IntArrayToString( iarray:pIntegerArray; count:integer):String;
 // Put array values in parentheses separated by commas.
@@ -415,7 +456,7 @@ Begin
       'o': Result := CONTROLSOFF;
       'e': Result := EVENTDRIVEN;    // "event"
       't': Result := TIMEDRIVEN;     // "time"
-      'm': Result := MULTIRATE;     // "time"
+      'm': Result := MULTIRATE;     // "MultiRate"
     ELSE
        Result := CTRLSTATIC;
     End;
@@ -2790,6 +2831,9 @@ End;
 FUNCTION  InterpretColorName(const s:string):Integer;
 
 Begin
+{$IFDEF FPC}
+        Result := 0; // RGB for black
+{$ELSE}
         Result := clBlue;  // default color
         Try
             if      CompareTextShortest(S,'black')=0  then Result := clBlack
@@ -2814,7 +2858,7 @@ Begin
         Except
            On E:Exception Do DoSimpleMsg('Invalid Color Specification: "' + S + '".', 724);
         End;
-
+{$ENDIF}
 End;
 
 Function MakeNewCktElemName(const oldname:string):string;
diff --git a/Parallel_Version/Source/Common/Ymatrix.pas b/Parallel_Version/Source/Common/Ymatrix.pas
index d97224d..cd4e36f 100644
--- a/Parallel_Version/Source/Common/Ymatrix.pas
+++ b/Parallel_Version/Source/Common/Ymatrix.pas
@@ -14,7 +14,7 @@ unit Ymatrix;
 
 interface
 
-uses uComplex,SysUtils, windows, DSSClass, DSSObject;
+uses uComplex,SysUtils, {$IFDEF WINDOWS}windows, {$ENDIF}DSSClass, DSSObject;
 
 
 {Options for building Y matrix}
diff --git a/Parallel_Version/Source/Controls/CapUserControl.pas b/Parallel_Version/Source/Controls/CapUserControl.pas
index f587a5e..0f7515e 100644
--- a/Parallel_Version/Source/Controls/CapUserControl.pas
+++ b/Parallel_Version/Source/Controls/CapUserControl.pas
@@ -79,7 +79,7 @@ TYPE
 
 implementation
 
-Uses  DSSGlobals, Windows, Sysutils;
+Uses  DSSGlobals, {$IFDEF FPC}dynlibs{$ELSE}Windows{$ENDIF}, Sysutils;
 
 { TCapUserControl }
 
diff --git a/Parallel_Version/Source/DLL/ImplGlobals.pas b/Parallel_Version/Source/DLL/ImplGlobals.pas
index 89af673..8a434b4 100644
--- a/Parallel_Version/Source/DLL/ImplGlobals.pas
+++ b/Parallel_Version/Source/DLL/ImplGlobals.pas
@@ -124,7 +124,14 @@ Procedure Fire_CheckControls;
 
 implementation
 
-uses DSSGlobals, Executive, sysutils;
+uses DSSGlobals, Executive, {$IFNDEF FPC}AnsiStrings, {$ENDIF}sysutils;
+
+{$IFNDEF FPC}
+function StrPLCopy(Dest: PAnsiChar; const Source: AnsiString; MaxLen: Cardinal): PAnsiChar; inline;
+begin
+  Result := System.AnsiStrings.StrPLCopy(Dest, Source, MaxLen);
+end;
+{$ENDIF}
 
 Procedure Fire_InitControls;
 begin
diff --git a/Parallel_Version/Source/Executive/ExecHelper.pas b/Parallel_Version/Source/Executive/ExecHelper.pas
index aa43e2d..0586c86 100644
--- a/Parallel_Version/Source/Executive/ExecHelper.pas
+++ b/Parallel_Version/Source/Executive/ExecHelper.pas
@@ -143,11 +143,11 @@ USES Command, ArrayDef, ParserDel, SysUtils, DSSClassDefs, DSSGlobals,
      DSSClass, DSSObject, Utilities, Solution,
      EnergyMeter, Generator, LoadShape, Load, PCElement,   CktElement,
      uComplex,  mathutil,  Bus,  SolutionAlgs,
-     DSSForms,  ExecCommands, Executive, Dynamics,
-     DssPlot,
-     Capacitor, Reactor, Line, Lineunits, Math,
+     
+     {$IFDEF FPC}CmdForms,{$ELSE}DSSForms,DssPlot,{$ENDIF} ExecCommands, Executive,
+     Dynamics, Capacitor, Reactor, Line, Lineunits, Math,
      Classes,  CktElementClass, Sensor,  { ExportCIMXML,} NamedObject,
-     RegularExpressionsCore, PstCalc;
+     {$IFDEF FPC}RegExpr,{$ELSE}RegularExpressionsCore,{$ENDIF} PstCalc;
 
 Var
    SaveCommands, DistributeCommands,  DI_PlotCommands,
@@ -263,6 +263,47 @@ End;
 //----------------------------------------------------------------------------
 FUNCTION DoBatchEditCmd:Integer;
 // batchedit type=xxxx name=pattern  editstring
+{$IFDEF FPC}
+VAR
+   ObjType, Pattern:String;
+   RegEx1: TRegExpr;
+   pObj: TDSSObject;
+   Params: Integer;
+Begin
+  Result := 0;
+  GetObjClassAndName(ObjType, Pattern);
+  IF CompareText(ObjType, 'circuit')=0 THEN Begin
+    // Do nothing
+  End ELSE Begin
+
+    LastClassReferenced[ActiveActor] := ClassNames[ActiveActor].Find(ObjType);
+
+    CASE LastClassReferenced[ActiveActor] of
+      0: Begin
+        DoSimpleMsg('BatchEdit Command: Object Type "' + ObjType + '" not found.'+ CRLF + parser[ActiveActor].CmdString, 267);
+        Exit;
+        End;{Error}
+    ELSE
+      Params:=Parser[ActiveActor].Position;
+      ActiveDSSClass[ActiveActor] := DSSClassList[ActiveActor].Get(LastClassReferenced[ActiveActor]);
+      RegEx1:=TRegExpr.Create;
+//      RegEx1.Options:=[preCaseLess];RegEx1.
+      RegEx1.Expression:=UTF8String(Pattern);
+      ActiveDSSClass[ActiveActor].First;
+      pObj:=ActiveDSSClass[ActiveActor].GetActiveObj;
+      while pObj <> Nil do begin
+        if RegEx1.Exec(UTF8String(pObj.Name)) then begin
+          Parser[ActiveActor].Position:=Params;
+          ActiveDSSClass[ActiveActor].Edit(ActiveActor);
+        end;
+        ActiveDSSClass[ActiveActor].Next;
+        pObj:=ActiveDSSClass[ActiveActor].GetActiveObj;
+      end;
+      RegEx1.Free;
+    End;
+  End;
+End;
+{$ELSE}
 VAR
    ObjType, Pattern:String;
    RegEx1: TPerlRegEx;
@@ -287,11 +328,11 @@ Begin
       ActiveDSSClass[ActiveActor] := DSSClassList[ActiveActor].Get(LastClassReferenced[ActiveActor]);
       RegEx1:=TPerlRegEx.Create;
       RegEx1.Options:=[preCaseLess];
-      RegEx1.RegEx:=UTF8String(Pattern);
+      RegEx1.RegEx:=Pattern; // UTF8String(Pattern);
       ActiveDSSClass[ActiveActor].First;
       pObj:=ActiveDSSClass[ActiveActor].GetActiveObj;
       while pObj <> Nil do begin
-        RegEx1.Subject:=UTF8String(pObj.Name);
+        RegEx1.Subject:=pObj.Name; // UTF8String(pObj.Name);
         if RegEx1.Match then begin
           Parser[ActiveActor].Position:=Params;
           ActiveDSSClass[ActiveActor].Edit(ActiveActor);
@@ -302,6 +343,7 @@ Begin
     End;
   End;
 End;
+{$ENDIF}
 
 //----------------------------------------------------------------------------
 FUNCTION DoRedirect(IsCompile:Boolean):Integer;
@@ -399,7 +441,7 @@ Begin
                   END;
                End;
 
-             IF ActiveCircuit[ActiveActor] <> Nil THEN ActiveCircuit[ActiveActor].CurrentDirectory := CurrDir +'\';
+             IF ActiveCircuit[ActiveActor] <> Nil THEN ActiveCircuit[ActiveActor].CurrentDirectory := CurrDir + PathDelim;
 
           EXCEPT
              On E: Exception DO
@@ -585,7 +627,7 @@ Begin
           Except
              On E:Exception Do DoSimpleMsg('Error making Directory: "'+SaveDir+'". ' + E.Message, 247);
           End;
-       SaveFile := SaveDir+'\'+SaveFile;
+       SaveFile := SaveDir + PathDelim + SaveFile;
      End;
      WriteClassFile(DSSClass, SaveFile, FALSE); // just write the class with no checks
    End;
@@ -2987,7 +3029,7 @@ Begin
 End;
 
 FUNCTION DoDI_PlotCmd:Integer;
-{$IFNDEF DLL_ENGINE}
+{$IF not (defined(DLL_ENGINE) or defined(FPC))}
 Var
     ParamName, Param:String;
     ParamPointer, i:Integer;
@@ -3000,7 +3042,7 @@ Var
     PeakDay:Boolean;
 {$ENDIF}
 Begin
-{$IFNDEF DLL_ENGINE}
+{$IF not (defined(DLL_ENGINE) or defined(FPC))}
      IF DIFilesAreOpen Then EnergyMeterClass[ActiveActor].CloseAllDIFiles(ActiveActor);
 
      If Not Assigned(DSSPlotObj) Then DSSPlotObj := TDSSPlot.Create;
@@ -3050,7 +3092,7 @@ Begin
 End;
 
 FUNCTION DoCompareCasesCmd:Integer;
-{$IFNDEF DLL_ENGINE}
+{$IF not (defined(DLL_ENGINE) or defined(FPC))}
 Var
     ParamName, Param:String;
     ParamPointer:Integer;
@@ -3060,7 +3102,7 @@ Var
     CaseName2, WhichFile:String;
 {$ENDIF}
 Begin
-{$IFNDEF DLL_ENGINE}
+{$IF not (defined(DLL_ENGINE) or defined(FPC))}
      IF DIFilesAreOpen Then EnergyMeterClass[ActiveActor].CloseAllDIFiles(ActiveActor);
      If Not Assigned(DSSPlotObj) Then DSSPlotObj := TDSSPlot.Create;
      CaseName1 := 'base';
@@ -3106,7 +3148,7 @@ Begin
 End;
 
 FUNCTION DoYearlyCurvesCmd:Integer;
-{$IFNDEF DLL_ENGINE}
+{$IF not (defined(DLL_ENGINE) or defined(FPC))}
 Var
     ParamName, Param:String;
     ParamPointer, i:Integer;
@@ -3118,7 +3160,7 @@ Var
     WhichFile:String;
 {$ENDIF}
 Begin
-{$IFNDEF DLL_ENGINE}
+{$IF not (defined(DLL_ENGINE) or defined(FPC))}
      IF DIFilesAreOpen Then EnergyMeterClass[ActiveActor].CloseAllDIFiles(ActiveActor);
 
      If Not Assigned(DSSPlotObj) Then DSSPlotObj := TDSSPlot.Create;
@@ -3181,6 +3223,7 @@ Begin
 End;
 
 FUNCTION DoVisualizeCmd:Integer;
+{$IF not defined(FPC)}                      
 Var
     DevIndex    :integer;
     Param       :String;
@@ -3190,8 +3233,10 @@ Var
     Quantity    :Integer;
     ElemName    :String;
     pElem       :TDSSObject;
+{$ENDIF}        
 Begin
      Result := 0;
+{$IF not defined(FPC)}
      // Abort if no circuit or solution
      If not assigned(ActiveCircuit[ActiveActor]) Then
      Begin
@@ -3250,6 +3295,7 @@ Begin
      End Else Begin
         DoSimpleMsg('Requested Circuit Element: "' + ElemName + '" Not Found.',282 ); // Did not find it ..
      End;
+{$ENDIF}
 End;
 
 FUNCTION DoCloseDICmd:Integer;
@@ -3937,7 +3983,3 @@ finalization
     PstCalcCommands.Free;
 
 end.
-
-
-
-
diff --git a/Parallel_Version/Source/Executive/Executive.pas b/Parallel_Version/Source/Executive/Executive.pas
index 98cbdcf..ddf0b7e 100644
--- a/Parallel_Version/Source/Executive/Executive.pas
+++ b/Parallel_Version/Source/Executive/Executive.pas
@@ -90,7 +90,7 @@ implementation
 USES ExecCommands, ExecOptions,
      {ExecHelper,} DSSClassDefs, DSSGlobals, ParserDel,  SysUtils,
      Utilities, Solution, DSSClass, IniRegSave,
-     DSSForms, KLUSolve;
+     {$IFDEF FPC} CmdForms{$ELSE} DSSForms{$ENDIF}, KLUSolve;
 
 
 //----------------------------------------------------------------------------
@@ -224,7 +224,9 @@ begin
           RebuildHelpForm := True; // because class strings have changed
        End;
 
+{$IFNDEF FPC}
        If Not IsDLL Then ControlPanel.UpdateElementBox ;
+{$ENDIF}
 
        {Prepare for new variables}
        ParserVars.Free;
@@ -247,7 +249,9 @@ begin
        Parser[ActiveActor]  :=  Tparser.Create;
 //       DestroyAll_KLU;
 //       Create_KLU;
+{$IFNDEF FPC}
        If Not IsDLL Then ControlPanel.UpdateElementBox ;
+{$ENDIF}
        {Prepare for new variables}
        ParserVars.Free;
        ParserVars := TParserVar.Create(100);  // start with space for 100 variables
diff --git a/Parallel_Version/Source/Executive/ShowOptions.pas b/Parallel_Version/Source/Executive/ShowOptions.pas
index 9716461..92b6da2 100644
--- a/Parallel_Version/Source/Executive/ShowOptions.pas
+++ b/Parallel_Version/Source/Executive/ShowOptions.pas
@@ -25,7 +25,7 @@ VAR
 implementation
 
 Uses ShowResults, ParserDel, Monitor, Utilities,
-     DSSGlobals, sysutils, DSSForms,
+     DSSGlobals, sysutils, {$IFDEF FPC} CmdForms{$ELSE} DSSForms{$ENDIF},
      LineUnits;
 
 
diff --git a/Parallel_Version/Source/Meters/EnergyMeter.pas b/Parallel_Version/Source/Meters/EnergyMeter.pas
index 86ccabc..4de85c8 100644
--- a/Parallel_Version/Source/Meters/EnergyMeter.pas
+++ b/Parallel_Version/Source/Meters/EnergyMeter.pas
@@ -382,7 +382,7 @@ VAR
 implementation
 USES  ParserDel, DSSClassDefs, DSSGlobals, Bus, Sysutils, MathUtil,  UCMatrix,
       Utilities, PCElement,  StackDef, Circuit, Line, LineUnits,
-      Classes, ReduceAlgs, Windows, Math, MemoryMap_Lib;
+      Classes, ReduceAlgs, {$IFNDEF FPC}Windows,{$ENDIF} Math, MemoryMap_Lib;
 
 Const NumPropsThisClass = 24;
 
diff --git a/Parallel_Version/Source/Meters/MemoryMap_lib.pas b/Parallel_Version/Source/Meters/MemoryMap_lib.pas
index 96cfef6..c2bde14 100644
--- a/Parallel_Version/Source/Meters/MemoryMap_lib.pas
+++ b/Parallel_Version/Source/Meters/MemoryMap_lib.pas
@@ -21,13 +21,17 @@ procedure Write_String(Mem_Space : TBytesStream; const Content : string);
 
 implementation
 
-uses windows,
+uses {$IFNDEF FPC}windows,{$ENDIF}
      sysutils,
      math,
      Dialogs,
      DSSGlobals;
 type
     TByteArr  = array of uint8;
+var
+  wordBuf: Word;
+// $01A0 is Header for identifying String type data
+// $02A0 is Header for identifying Double type data
 //******************************************************************************
 // Creates a new BytesStream for the caller
 // Returns the handler to handle the new memory space
@@ -37,7 +41,12 @@ var
   Mem_Space : TBytesStream;
 begin
   Mem_Space :=  TBytesStream.Create();
-  Mem_Space.WriteData($01A0);   // Header for identifying String type data
+{$IFNDEF FPC}
+  Mem_Space.WriteData($01A0);
+{$ELSE}
+  wordBuf := $01A0;
+  Mem_Space.Write(wordBuf,2);
+{$ENDIF};
   Write_String(Mem_Space, Init_Str);
   Result  :=  Mem_Space;
 end;
@@ -46,7 +55,12 @@ end;
 //******************************************************************************
 procedure WriteintoMemStr(Mem_Space : TBytesStream; Content: string); overload;
 begin
-  Mem_Space.WriteData($01A0);   // Header for identifying String type data
+{$IFNDEF FPC}
+  Mem_Space.WriteData($01A0);
+{$ELSE}
+  wordBuf := $01A0;
+  Mem_Space.Write(wordBuf,2);
+{$ENDIF};
   Write_String(Mem_Space, Content);
 end;
 //******************************************************************************
@@ -54,8 +68,14 @@ end;
 //******************************************************************************
 procedure WriteintoMem(Mem_Space : TBytesStream; Content: Double); overload;
 begin
-  Mem_Space.WriteData($02A0);   // Header for identifying a double type data
+{$IFNDEF FPC}
+  Mem_Space.WriteData($02A0);
   Mem_Space.WriteData(Content);
+{$ELSE}
+  wordBuf := $02A0;
+  Mem_Space.Write(wordBuf,2);
+  Mem_Space.Write(Content, sizeof(double));
+{$ENDIF};
 end;
 //******************************************************************************
 // Saves the content of the BytesStream into the specified file path
@@ -133,7 +153,11 @@ begin
                   end;
             end;
             2 : begin        // Is a Double
+              {$IFNDEF FPC}
                     Mem_Space.ReadData(TVariableDbl,8);
+              {$ELSE}
+                    Mem_Space.Read(TVariableDbl,sizeof(double));
+              {$ENDIF}
                     idx :=  idx + 7;
                     if Fhead then Fhead :=  False
                     else write(F,', ');
@@ -164,9 +188,12 @@ Begin
 
 {  Str_Sz  :=  length(Content)-1;
   For idx := 0 to Str_Sz do Mem_Space.WriteData(Content[idx+1]);}
-
+{$IFNDEF FPC}
   For idx := 1 to length(Content) do Mem_Space.WriteData(Content[idx]);
-
+{$ELSE}
+  For idx := 1 to length(Content) do
+      Mem_Space.Write(Content[idx],Length(Content[idx])); // TODO - verify AnsiString vs. unicode
+{$ENDIF}
 End;
 
 end.
diff --git a/Parallel_Version/Source/PCElements/GenUserModel.pas b/Parallel_Version/Source/PCElements/GenUserModel.pas
index 56a7146..f8c55c9 100644
--- a/Parallel_Version/Source/PCElements/GenUserModel.pas
+++ b/Parallel_Version/Source/PCElements/GenUserModel.pas
@@ -86,7 +86,7 @@ TYPE
 
 implementation
 
-Uses Generator, DSSGlobals, Windows, Sysutils;
+Uses Generator, DSSGlobals, {$IFDEF FPC}dynlibs{$ELSE}Windows{$ENDIF}, Sysutils;
 
 { TGenUserModel }
 
diff --git a/Parallel_Version/Source/PCElements/Isource.pas b/Parallel_Version/Source/PCElements/Isource.pas
index 6fe61c1..1004ff8 100644
--- a/Parallel_Version/Source/PCElements/Isource.pas
+++ b/Parallel_Version/Source/PCElements/Isource.pas
@@ -22,7 +22,7 @@ unit Isource;
 
 interface
 
-USES DSSClass, PCClass,PCElement, ucmatrix, ucomplex, Spectrum, StdVcl, Loadshape;
+USES DSSClass, PCClass,PCElement, ucmatrix, ucomplex, Spectrum, Loadshape;
 
 TYPE
 // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
diff --git a/Parallel_Version/Source/PCElements/PVSystemUserModel.pas b/Parallel_Version/Source/PCElements/PVSystemUserModel.pas
index dad44d8..4605e2c 100644
--- a/Parallel_Version/Source/PCElements/PVSystemUserModel.pas
+++ b/Parallel_Version/Source/PCElements/PVSystemUserModel.pas
@@ -71,7 +71,7 @@ TYPE
 
 implementation
 
-Uses PVSystem, DSSGlobals, Windows, Sysutils;
+Uses PVSystem, DSSGlobals, {$IFDEF FPC}dynlibs{$ELSE}Windows{$ENDIF}, Sysutils;
 
 { TPVsystemUserModel }
 
diff --git a/Parallel_Version/Source/PCElements/StoreUserModel.pas b/Parallel_Version/Source/PCElements/StoreUserModel.pas
index e64f246..a4526ef 100644
--- a/Parallel_Version/Source/PCElements/StoreUserModel.pas
+++ b/Parallel_Version/Source/PCElements/StoreUserModel.pas
@@ -130,7 +130,7 @@ TYPE
 
 implementation
 
-Uses Storage, DSSGlobals, Windows, Sysutils;
+Uses Storage, DSSGlobals, {$IFDEF FPC}dynlibs{$ELSE}Windows{$ENDIF}, Sysutils;
 
 { TStoreUserModel }
 
diff --git a/Parallel_Version/Source/Parser/ParserDel.pas b/Parallel_Version/Source/Parser/ParserDel.pas
index 97e3ddc..1386a81 100644
--- a/Parallel_Version/Source/Parser/ParserDel.pas
+++ b/Parallel_Version/Source/Parser/ParserDel.pas
@@ -18,7 +18,8 @@ unit ParserDel;
 interface
 
 Uses
-    Arraydef, classes,{controls,} DSSForms, Sysutils, RPN, HashList;
+    Arraydef, classes,{controls,} {$IFDEF FPC} CmdForms,{$ELSE} DSSForms,{$ENDIF} 
+    Sysutils, RPN, HashList;
 
 
 
@@ -112,7 +113,7 @@ Type
 
 implementation
 
-Uses  Dialogs;
+{$IFNDEF FPC}Uses  Dialogs;{$ENDIF}
 
 CONST
   Commentchar = '!';
diff --git a/Parallel_Version/Source/Shared/IniRegSave.pas b/Parallel_Version/Source/Shared/IniRegSave.pas
index f83da0b..89c4982 100644
--- a/Parallel_Version/Source/Shared/IniRegSave.pas
+++ b/Parallel_Version/Source/Shared/IniRegSave.pas
@@ -20,14 +20,14 @@ unit IniRegSave;
 interface
 
 uses
-  Registry;
+  {$IFDEF FPC}IniFiles{$ELSE}Registry{$ENDIF};
 
 type
 
   TIniRegSave = class(TObject)
     FSection : String;
     Fname   : String;
-    FIniFile: TRegIniFile;
+    FIniFile: {$IFDEF FPC}TIniFile{$ELSE}TRegIniFile{$ENDIF};
 
   private
     procedure Set_FSection(const Value: String);
@@ -61,7 +61,11 @@ implementation
 constructor TIniRegSave.Create(const Name: String);
 begin
      FName := Name;
+     {$IFDEF FPC}
+     FIniFile := TIniFile.Create(Name);
+     {$ELSE}
      FIniFile := TRegIniFile.Create(Name);
+     {$ENDIF}
      FSection := 'MainSect';
 end;
 
diff --git a/Parallel_Version/Source/Shared/mathutil.pas b/Parallel_Version/Source/Shared/mathutil.pas
index 7f089be..103ad9f 100644
--- a/Parallel_Version/Source/Shared/mathutil.pas
+++ b/Parallel_Version/Source/Shared/mathutil.pas
@@ -290,7 +290,7 @@ End;
 //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 function RCDSUM( Data:Pointer; Count:Integer): Extended; register;
 
-{$IFDEF CPUX64}
+{$IF (Defined(CPUX64) or Defined(Darwin))}
 
 begin
   Result := 0.0;
@@ -357,7 +357,7 @@ BEGIN
     StdDev := Data^[1];
     Exit;
   end;
-{$IFDEF CPUX64}
+{$IF (Defined(CPUX64) or Defined(Darwin))}
   Mean := 0.0;
   for i := 1 to NData do Mean := Mean + Data^[i];
   Mean := Mean / Ndata;
-- 
2.10.0.windows.1

